{"data":{"config":{"html":"<p>Enrique Arias’ personal blog.\n<br />\n<span style=\"font-size: 0.9em; color: gray;\">Developer and occasional writer among other things.</span></p>","fields":{"slug":"/"},"frontmatter":{"title":"Nocturnal Notes","language":"en"}},"markdownRemark":{"id":"2bf3b2a6-75d9-5b43-8e3d-b92865be7835","excerpt":"Everyone who has spent some time working with git irremediably knows about \nmerging. Suppose we have a branch called A coming from master…","html":"<p>Everyone who has spent some time working with git irremediably knows about\nmerging. Suppose we have a branch called A coming from master. The merge\ncommand brings the changes carried in A into master.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">71a621b <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> master<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> A <span class=\"token function\">file</span> updated\n2dc6065 <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> new A <span class=\"token function\">file</span>\n76a1097 Demo <span class=\"token function\">file</span> updated\na31e004 README updated\n44d4c5b New README <span class=\"token function\">file</span>\nee42779 New demo <span class=\"token function\">file</span></code></pre></div>\n<p>It does works fine, changes are placed ahead in the master branch.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">1———2———3———A1———A2</code></pre></div>\n<p>The log reflects an incremental order of commits, or put in other words,\nthe commits are shown in the same order were added. A timeline of changes.</p>\n<p>When these modifications have happened at the same time in a B branch, which\nis not as rarely as it seems, the merge strategy cannot do a fast-forward\nupdate (bring changes ahead).</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">057a856 <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> master<span class=\"token punctuation\">)</span> Merge branch <span class=\"token string\">'B'</span>\n71a621b <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> A <span class=\"token function\">file</span> updated\n1ac6aff <span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> B <span class=\"token function\">file</span> updated\n2dc6065 <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> new A <span class=\"token function\">file</span>\nd657116 <span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> new B <span class=\"token function\">file</span>\n76a1097 Demo <span class=\"token function\">file</span> updated\na31e004 README updated\n44d4c5b New README <span class=\"token function\">file</span>\nee42779 New demo <span class=\"token function\">file</span></code></pre></div>\n<p>Because changes did happened in the same time frame, the merge command makes\nuse of a recursive strategy interlacing A and B commits.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">1———2———3———B1———A1———B2———A2</code></pre></div>\n<p>Interlaced commits don’t keep proper track of branching blocks. There is a way\nto prevent this scenario once a feature is completed. Instead of merging the\nwhole bunch of commits, a better option is pushing the changes into master (or\ndevelop) as a unique commit with a descriptive message. This approach improves\nreadability and traceability of the git log.</p>\n<p>Perhaps for personal or one-man sized projects is not too important (it is better\nto keep at good habits, though) having a strict sorted timeline of events. But\nwhen comes to big teams where each feature needs to be perfectly isolated and\ntagged an unsorted log history would make the difference between mayhem and\nharmony.</p>\n<p>For those newbies in git (and whose did not find much time to dive into)\nthere’s more than only merging. Let’s go beyond merge.</p>\n<h2>Rebase</h2>\n<p>Unlike merge, rebase allows to do the merge based on a feature branch keeping\ntrack of those related commits blocks in the same slot.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">1———2———3———A1———A2———B1———A2</code></pre></div>\n<p>While the origin branch’s history\nkeeps linear, the new feature commits are placed just ahead, maintaining a\nmore coherent log.</p>\n<p>A convenient way to prevent conflicts while working on a feature branch is to\nbring frequently the latest changes from origin branch.</p>\n<div class=\"gatsby-highlight\" data-language=\"git\"><pre class=\"language-git\"><code class=\"language-git\">> git rebase &lt;origin-branch> </code></pre></div>\n<p>Having a the next branching state.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">        B1———B2\n       /\nA1———A2———A3———A4</code></pre></div>\n<p><code class=\"language-text\">rebase</code> permits removing momentarily the current commits (the ones that are not\npresent in the origin branch), put in place the new changes and install on top\nfeature commits again.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">                  B1———B2\n                 /\nA1———A2———A3———A4</code></pre></div>\n<p>While updating the branch is intended to be carried out as often as possible,\nsometimes the differences between both branches are too complex that conflicts\narise. As with merge conflicts must be resolved but interactevely. <code class=\"language-text\">rebase</code> let\nus decide what to do in case of conflicts: fix them and continue or abort. Below\nthere’s a list with the most used options.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rebase --continue <span class=\"token comment\"># follow rebase</span>\n<span class=\"token function\">git</span> rebase --skip     <span class=\"token comment\"># jump current conflict</span>\n<span class=\"token function\">git</span> rebase —-abort    <span class=\"token comment\"># stop rebase and leave things as thet were</span>\n<span class=\"token function\">git</span> rebase --quit     <span class=\"token comment\"># like abort but keeping the committed changes</span></code></pre></div>\n<h2>Forcing push for rebased branches</h2>\n<p>It can happen when rebasing, sometimes, the remote repository rejects new\nchanges because of the rebase itself. The rejection message will read something\nabout our local branch is behind the remote one.</p>\n<p>When the rebase is executed, the new changes are put in the middle of the\ncommits stack, desynchronising with the remote picture. In this particular\ncase, the message is confusing, it will ask you to updated from remote branch\nwhich, obviously, we don’t want.</p>\n<p>In order to solve this problem, the push command can be forced by passing the\n<code class=\"language-text\">--force</code> option.</p>\n<div class=\"gatsby-highlight\" data-language=\"git\"><pre class=\"language-git\"><code class=\"language-git\">git push --force // -f for shorcut</code></pre></div>","frontmatter":{"title":"Beyond Merge","date":"May 01, 2019","translations":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/beyond-merge/","language":"en","previous":{"fields":{"slug":"/hi-folks/"},"frontmatter":{"title":"New Beginnings"}},"next":null}}